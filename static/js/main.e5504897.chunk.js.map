{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","key","styles","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","timeInHistory","slice","current","_step","move","destination","step","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MAEMA,EAAQ,CACZC,WAAY,YACZC,OAAQ,qBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QASIC,EANA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,QAAT,OACb,4BAAQT,MAAOA,EAAOS,QAASA,GAC5BD,ICVCR,EAAQ,CACZE,OAAQ,qBACRQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,mCAWDC,EARD,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASR,EAAX,EAAWA,QAAX,OACZ,yBAAKT,MAAOA,GACXiB,EAAQC,KAAI,SAACC,EAAOC,GAAR,OACX,kBAAC,EAAD,CAAQC,IAAKD,EAAGZ,MAAOW,EAAQV,QAAS,kBAAMA,EAAQW,WCZ1D,IAAME,EAAS,CACbX,MAAO,QACPE,OAAQ,aAmDKU,EAhDF,WAAO,IAAD,EAEWC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QAFnC,mBAEZC,EAFY,KAEHC,EAFG,OAGiBJ,mBAAS,GAH1B,mBAGZK,EAHY,KAGAC,EAHA,OAIWN,oBAAS,GAJpB,mBAIZO,EAJY,KAIHC,EAJG,KAKbC,ECdC,SAAyBhB,GAW9B,IAVA,IAAMiB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAd,EAAI,EAAGA,EAAIc,EAAMC,OAAQf,IAAK,CAAC,IAAD,cACnBc,EAAMd,GADa,GAC9BgB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIrB,EAAQmB,IAAMnB,EAAQmB,KAAOnB,EAAQoB,IAAMpB,EAAQmB,KAAOnB,EAAQqB,GACpE,OAAOrB,EAAQmB,GAGnB,OAAO,KDHMG,CAAgBZ,EAAQE,IAgCvC,OACE,oCACE,kBAAC,EAAD,CAAOZ,QAASU,EAAQE,GAAapB,QAhCrB,SAAAW,GAClB,IAAMoB,EAAgBb,EAAQc,MAAM,EAAGZ,EAAa,GAC9Ca,EAAUF,EAAcX,GACxBZ,EAAO,YAAOyB,GAEjBT,GAAUhB,EAAQG,KACrBH,EAAQG,GAAKW,EAAU,IAAM,IAC7BH,EAAW,GAAD,mBAAKY,GAAL,CAAoBvB,KAC9Ba,EAAcU,EAAcL,QAC5BH,GAAYD,OAwBV,yBAAK/B,MAAOsB,GACV,2BAAIW,EAAS,UAAYA,EAAS,iBAAmBF,EAAU,IAAM,MAhBvEJ,EAAQT,KAAI,SAACyB,EAAOC,GAClB,IAAMC,EAAcD,EAAI,qBAAiBA,GAAS,cAClD,OACE,wBAAIvB,IAAKuB,GACT,4BAAQnC,QAAS,kBATrBqB,EADWgB,EAUuBF,QARlCZ,EAAWc,EAAO,IAAM,GAFb,IAAAA,IAWJD,UElCIE,EAFH,kBAAM,kBAAC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e5504897.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst style = {\r\n  background: 'lightblue',\r\n  border: '2px solid darkblue',\r\n  fontSize: '30px',\r\n  fontWeight: '500',\r\n  cursor: 'pointer',\r\n  outline: 'none'\r\n}\r\n\r\nconst Square = ({value, onClick}) => (\r\n  <button style={style} onClick={onClick}>\r\n    {value}\r\n  </button>\r\n)\r\n\r\nexport default Square;\r\n","import React from 'react'\r\nimport Square from './Square'\r\n\r\nconst style = {\r\n  border: '4px solid darkblue',\r\n  borderRadius: '10px',\r\n  width: '250px',\r\n  height: '250px',\r\n  margin: '0 auto',\r\n  display: 'grid',\r\n  gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)'\r\n};\r\n\r\nconst Board = ({squares, onClick}) => (\r\n  <div style={style}>\r\n  {squares.map((square,i) => (\r\n    <Square key={i} value={square} onClick={() => onClick(i)} />\r\n  ))}\r\n  </div>\r\n)\r\n\r\nexport default Board;\r\n","import React, { useState} from 'react';\r\nimport Board from './Board';\r\nimport { calculateWinner } from '../helpers';\r\n\r\nconst styles = {\r\n  width: '200px',\r\n  margin: '20px auto',\r\n};\r\n\r\nconst Game = () => {\r\n\r\nconst [history, setHistory] = useState([Array(9).fill(null)]);\r\nconst [stepNumber, setStepNumber] = useState(0);\r\nconst [xIsNext, setXisNext] = useState(true);\r\nconst winner = calculateWinner(history[stepNumber]);\r\n\r\nconst handleClick = i => {\r\n  const timeInHistory = history.slice(0, stepNumber + 1);\r\n  const current = timeInHistory[stepNumber];\r\n  const squares = [...current]\r\n\r\n  if(winner || squares[i]) return;\r\n  squares[i] = xIsNext ? 'X' : 'O';\r\n  setHistory([...timeInHistory, squares]);\r\n  setStepNumber(timeInHistory.length);\r\n  setXisNext(!xIsNext);\r\n}\r\n\r\nconst jumpTo = step => {\r\n    setStepNumber(step);\r\n    setXisNext(step % 2 === 0)\r\n};\r\n\r\nconst renderMoves = () => (\r\n    history.map((_step, move) => {\r\n      const destination = move ? `go to move#${move}` : 'go to start'\r\n      return(\r\n        <li key={move}>\r\n        <button onClick={() => jumpTo(move)}>\r\n          {destination}\r\n        </button>\r\n        </li>\r\n      )\r\n    })\r\n  )\r\n\r\nreturn(\r\n  <>\r\n    <Board squares={history[stepNumber]} onClick={handleClick} />\r\n    <div style={styles}>\r\n      <p>{winner ? 'Winner ' + winner : 'Next Player: ' + (xIsNext ? 'X' : 'O')}</p>\r\n      {renderMoves()}\r\n    </div>\r\n </>\r\n  )\r\n}\r\n\r\nexport default Game;\r\n","export function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import React from 'react';\nimport Game from './components/Game'\n\nconst App = () => <Game />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}